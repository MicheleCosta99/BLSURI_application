MODULE RHS

  IMPLICIT NONE

  CONTAINS

!---------------------------------------------------------------
  SUBROUTINE dydx(neq, n, x, y, yp)

    INTEGER, INTENT(IN) :: neq, n
    REAL*8, DIMENSION(neq), INTENT(IN) :: y
    REAL*8, DIMENSION(neq), INTENT(OUT) :: yp
    REAL*8, INTENT(IN) :: x
                                                    
    yp(1) = y(2)  !de teta/de xi = eta
    yp(2) = -(2.0d0/x)*y(2) -y(1)**n   !de eta/de xi= -2/xi* eta -theta**n
  
  END SUBROUTINE dydx
!---------------------------------------------------------------

END MODULE RHS


MODULE ODE_SOLVER

  USE RHS

  IMPLICIT NONE

  CONTAINS

!---------------------------------------------------------------
  SUBROUTINE save_results(fname, npoints, neq, x, y, y_pressione, y_densita, stop)

    CHARACTER(len=*), INTENT(IN) :: fname

    INTEGER :: i, j
    INTEGER, INTENT(IN) :: npoints, neq, stop !stop per fermare il file e scrivere solo fino al pt giusto

    REAL*8, DIMENSION(0:npoints), INTENT(IN) :: x
    REAL*8, DIMENSION(neq, 0:npoints), INTENT(IN) :: y
    REAL*8, DIMENSION(0:npoints), INTENT(IN) :: y_pressione, y_densita

    !salvo i risultati
    OPEN(40, FILE=fname)

    DO i=0, stop
      WRITE(40,'(5(1pe20.12))') x(i), (y(j,i), j=1, neq), y_pressione(i), y_densita(i)
    END DO

    CLOSE(40)
  
  END SUBROUTINE save_results
!---------------------------------------------------------------


!---------------------------------------------------------------
  SUBROUTINE RK4(neq, h, n, x, yold, ynew)

    INTEGER, INTENT(IN) :: neq, n
    REAL*8, INTENT(IN) :: h
    REAL*8, DIMENSION(neq), INTENT(IN) :: yold
    REAL*8, INTENT(IN) :: x
    REAL*8, DIMENSION(neq), INTENT(OUT) :: ynew
    REAL*8, DIMENSION(neq) :: k1, k2, k3, k4

    INTEGER :: i

    !primo stadio
    CALL dydx(neq, n, x, yold, k1)

    DO i=1, neq
      ynew(i)=yold(i)+0.5*h*k1(i)
    END DO 

    !secondo stadio
    CALL dydx(neq, n, x+0.5*h, ynew, k2) !modificato aggiung 1/2h

    DO i=1, neq
      ynew(i)=yold(i)+0.5*h*k2(i)
    END DO

    !terzo stadio
    CALL dydx(neq, n, x+0.5*h, ynew, k3)  !aggiungg 1/2h

    DO i=1, neq
      ynew(i)=yold(i)+h*k3(i)
    END DO

    !quarto stadio
    CALL dydx(neq, n, x+h, ynew, k4)

    DO i=1, neq
      ynew(i)=yold(i)+h*(k1(i)+2.0d0*(k2(i)+k3(i)) + k4(i))/6.0d0
    END DO 

  END SUBROUTINE RK4
!---------------------------------------------------------------

  SUBROUTINE roots (neq,n,x_l,x_r,y_l,y_r,x_m,y_m)

    INTEGER, INTENT(IN) :: neq, n
    REAL*8, INTENT(IN) :: x_l, x_r
    REAL*8, INTENT(IN), DIMENSION(neq) :: y_l, y_r   
    REAL*8, INTENT(OUT) :: x_m  !x_zero
    REAL*8, INTENT(OUT), DIMENSION(neq) :: y_m

    REAL*8, PARAMETER :: toll=1.d-12
    REAL*8, DIMENSION(neq) :: y_ln, y_rn  !valori di y_l e y_r nei cicli 
    REAL*8 :: xl, xr, hnew , test         !valori di x_l e y_r nei cicli
    INTEGER :: cont !num iterazioni

    !azzero contatore, setto y_m per entrare nel ciclo e variabili accessorie

    cont=0
    y_m(1)=10.0d0
    xl=x_l
    xr=x_r
    y_ln=y_l
    y_rn=y_r

    DO WHILE (ABS(y_m(1))>toll)
       cont=cont+1
       x_m=(xl+xr)/2.0d0
       hnew=ABS(xl-x_m)
       CALL RK4(neq,hnew,n,xl,y_ln,y_m)
       test=y_m(1)*y_ln(1)
       IF (test==0.0d0) THEN 
          return
       ELSE IF (test<0.0d0) THEN
          xr=x_m
          y_rn=y_m
       ELSE 
          xl=x_m
          y_ln=y_m
       END IF
     END DO 
  END SUBROUTINE roots

!-----------------------------------------------------------------------

END MODULE ODE_SOLVER




PROGRAM ESAME

  USE ODE_SOLVER

  IMPLICIT NONE

  INTEGER, PARAMETER :: npunti=1000
  INTEGER, PARAMETER :: neq=2
  
  REAL*8, DIMENSION(0:npunti) :: x
  REAL*8, DIMENSION(neq, 0:npunti) :: y
  REAL*8, DIMENSION(0:npunti) :: y_pressione, y_densita
  REAL*8 :: xmin, xmax, h
  REAL*8 :: x_zero 
  REAL*8, DIMENSION(neq) :: y_zero
  REAL*8, DIMENSION(1:2) :: esatto      !contiene valori esatti 
  REAL*8, ALLOCATABLE :: phi_anal(:), errore_phi(:), y_p_anal(:), errore_p(:), y_d_anal(:), errore_d(:)
  
  INTEGER, DIMENSION(1:3) :: n
  INTEGER :: i, j, k

  CHARACTER (len=11) :: filename
  CHARACTER (len=1), DIMENSION (1:3) ::nc

  !QUI CAMBIA SICURO 
  !SE HO CAPITO BENE, XMIN E XMAX LI PRENDO COME VOGLIO, L'OBIETTIVO E TROVARE 
  !UN XMAX CHE CORRISPONDE AL PRIMO VALORE NEGATIVO DI Y. QUINDI SI VA TIPO A TENTATIVI
  
  !setto i valori di n ed nc

  n(1)=0
  n(2)=1
  n(3)=3

  nc(1)='0'
  nc(2)='1'
  nc(3)='3'
  
  !setto valori esatti d x_zero

  esatto(1)=SQRT(6.d0)
  esatto(2)=ACOS(-1.d0)

  !setto gli estremi delle x 

  xmin=0.0d0   
  xmax=7.0d0  !cosi sono sicuro che comprenda anche lo zero di n=3
  h=(xmax-xmin)/npunti  !passo di integrazione

  !costruisco la griglia di valori x
  DO i=0, npunti
    x(i)=xmin+i*h
  END DO

  !inizializzo il valore iniziale di y=(theta,eta)
  y(1,0)=1.0d0
  y(2,0)=0.0d0

  !inizializzo valori profili di pressione e densita
  y_pressione(0)=1.0d0  
  y_densita(0)=1.0d0  

  !calcolo la soluzione con il metodo di RK4
  
  DO j=1, 3
     y(1,1)=1.0d0-(x(1)**2/6.0d0) + (n(j)*x(1)**4/120.d0)  !sviluppo in serie  
     y(2,1)=-x(1)/3.d0 + (n(j)*x(1)**3)/30.d0
     y_pressione(1)=y(1,1)**(n(j)+1)  !profilo pressione
     y_densita(1)=y(1,1)**n(j)  !profilo densita    
     DO i=2, npunti
       CALL RK4(neq, h, n(j), x(i-1), y(:,i-1), y(:,i))  
       y_pressione(i)=y(1,i)**(n(j)+1)    !profilo di pressione
       y_densita(i)=y(1,i)**n(j)   !profilo di densita
       IF (y(1,i)<0.0d0) THEN
          EXIT
       END IF
     END DO
    

    !salvo le soluzioni su file
 
     filename(1:6)='theta_'
     filename(7:7)=nc(j)
     filename(8:11)='.txt'
     CALL save_results(filename, npunti, neq, x, y, y_pressione, y_densita, i)

    !ricerca degli zeri tramite subroutine e costruzione file.

     CALL roots (neq,n(j),x(i-1),x(i),y(:,i-1),y(:,i),x_zero,y_zero)


     OPEN(50, FILE='zeri.txt')
     IF (j==1.or.j==2) THEN
       WRITE (50,*) n(j), npunti, x_zero, y_zero(1), esatto(j), ABS(esatto(j)-x_zero)/esatto(j)
     ELSE 
       WRITE (50,*) n(j), npunti, x_zero, y_zero(1)  
     END IF     
 
 
     !calcolo degli errori commessi.


      ALLOCATE(y_d_anal(0:i),errore_d(0:i),phi_anal(0:i),errore_phi(0:i),y_p_anal(0:i),errore_p(0:i))

      IF (j==1) THEN
         OPEN(62, FILE='errore_0_p.txt')
         OPEN(63, FILE='errore_0_d.txt')
         OPEN(65, FILE='errore_0_phi.txt')
         DO k=0, i
           y_p_anal(k)=(1.d0-(x(k)**2/6.d0))**(n(j)+1)  !profilo pressione analitico
           errore_p(k)=ABS(y(1,k)**(n(j)+1)-y_p_anal(k))
           y_d_anal(k)=1.0d0                            !profio di densita analitico 
           errore_d(k)=ABS(y(1,k)**n(j)-y_d_anal(k))
           phi_anal(k)=(x(k)**3)/3.d0
           errore_phi(K)=ABS(-(x(k)**2)*y(2,k)-phi_anal(k)) 
           WRITE(62,'(4(1pe20.12))') x(k), y(1,k)**(n(j)+1), y_p_anal(k), errore_p(k)
           WRITE(63,'(4(1pe20.12))') x(k), y(1,k)**n(j), y_d_anal(k), errore_d(k)
           WRITE(65,'(4(1pe20.12))') x(k), -(x(k)**2)*y(2,k), phi_anal(k), errore_phi(k) 
         END DO
         CLOSE(62)
         CLOSE(63)
         CLOSE(65)
       ELSE IF (j==2) THEN
          OPEN(72,FILE='errore_1_p.txt')
          OPEN(73,FILE='errore_1_d.txt')
          OPEN(75,FILE='errore_1_phi.txt')
          DO k=1, i
            y_p_anal(k)=(SIN(x(k))/x(k))**(n(j)+1)  !profilo pressione analitico
            errore_p(k)=ABS(y(1,k)**(n(j)+1)-y_p_anal(k))
            y_d_anal(k)=SIN(x(k))/x(k)              !profilo di densita analitico
            errore_d(k)=ABS(y(1,k)**n(j)-y_d_anal(k))
            phi_anal(k)=-x(k)*COS(x(k))+SIN(x(k))
            errore_phi(K)=ABS(-(x(k)**2)*y(2,k)-phi_anal(k)) 
            WRITE(72,'(4(1pe20.12))') x(k), y(1,k)**(n(j)+1), y_p_anal(k), errore_p(k)
            WRITE(73,'(4(1pe20.12))') x(k), y(1,k), y_d_anal(k), errore_d(k)
            WRITE(75,'(4(1pe20.12))') x(k), -(x(k)**2)*y(2,k), phi_anal(k), errore_phi(k)
          END DO 
          CLOSE(72)
          CLOSE(75)
       END IF

     
       DEALLOCATE(y_d_anal,errore_d,phi_anal,errore_phi,y_p_anal,errore_p)
      
   
  END DO 



END PROGRAM ESAME
